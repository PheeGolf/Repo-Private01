#include <iostream>
#include <fstream>
#include <vector>

using namespace std;

// ฟังก์ชันแปลง binary bit เป็น array ของเลขฐานสอง
vector<int> binary_to_array(string binary_bit) {
  vector<int> array;
  for (char bit : binary_bit) {
    array.push_back(bit - '0');
  }
  return array;
}

// ฟังก์ชันแปลง array ของเลขฐานสองเป็น grayscale image
void array_to_image(vector<int> array, string filename) {
  ofstream fout(filename, ios::binary);

  // เขียน header ของไฟล์ BMP
  fout << "BM" << (char)0 << (char)0 << (char)0 << (char)0;
  int file_size = 14 + array.size();
  fout.write((char*)&file_size, 4);
  fout.write((char*)&file_size, 4);
  fout.write((char*)"\x00\x00", 2);
  fout.write((char*)"\x00\x00", 2);
  int offset = 14;
  fout.write((char*)&offset, 4);

  // เขียนข้อมูลของภาพ
  int width = array.size() / 8;
  int height = 8;
  fout.write((char*)&width, 4);
  fout.write((char*)&height, 4);
  fout.write((char*)"\x01\x00", 2);
  fout.write((char*)"\x01\x00", 2);
  int compression = 0;
  fout.write((char*)&compression, 4);
  int image_size = array.size();
  fout.write((char*)&image_size, 4);
  fout.write((char*)"\x00\x00\x00\x00", 4);
  fout.write((char*)"\x00\x00\x00\x00", 4);

  // เขียน pixel data
  for (int i = 0; i < height; i++) {
    for (int j = 0; j < width; j++) {
      int byte = 0;
      for (int k = 0; k < 8; k++) {
        byte |= (array[i * width + j] << (7 - k));
      }
      fout.write((char*)&byte, 1);
    }
  }

  fout.close();
}

// ตัวอย่างการใช้งาน
int main() {
  string binary_bit = "1001011011001111";
  vector<int> array = binary_to_array(binary_bit);
  array_to_image(array, "image.bmp");
  return 0;
}


Salary